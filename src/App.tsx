import {useEffect, useRef, useState} from "react";
import "./App.css";
import {
  App as AntdApp,
  Button,
  Card,
  Cascader,
  Checkbox,
  Col, ConfigProvider, DatePicker,
  Divider, Drawer, FloatButton,
  Input,
  Layout, message, Modal, Progress,
  Radio,
  Row,
  Select, Slider,
  Space, Steps
} from "antd";
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import locale from 'antd/locale/ru_RU';
import * as React from "react";
import {DownloadOutlined, GithubOutlined, InfoCircleOutlined} from "@ant-design/icons";
import {Content, Footer, Header} from "antd/es/layout/layout";

enum AppState {
  Register,
  Test,
}

export default function App() {
  const [state, setState] = useState(AppState.Test);
  const [user, setUser] = useState<User>();

  return (
    <div className="App">
      <ConfigProvider locale={locale}>
        {state === AppState.Register &&
          <Register onStartTest={user => {
            setUser(user);
            setState(AppState.Test);
          }}/>
        }
        {state === AppState.Test &&
          <Test user={user!} onComplete={() => {}}/>
        }
      </ConfigProvider>
    </div>
  );
}

interface User {
  name: string;
  sureName: string;
  gender: string;
  birthday: string;
  email: string;
  password: string;
}

function Register(props: {onStartTest: (user: User) => void}) {
  const [messageApi, contextHolder] = message.useMessage();

  const [name, setName] = useState<string>();
  const [sureName, setSureName] = useState<string>();
  const [gender, setGender] = useState<string>();
  const [birthday, setBirthday] = useState<string>();
  const [email, setEmail] = useState<string>();
  const [password, setPassword] = useState<string>();
  const [confirmPassword, setConfirmPassword] = useState<string>();

  const [allowProvisionPersonalData, setAllowProvisionPersonalData] = useState(false);

  function tryStartTest(): boolean {
    const fields = [name, sureName, gender, birthday, email, password, confirmPassword];
    for (let i = 0; i < fields.length; i++) {
      if ([undefined, null, ""].includes(fields[i])) {
        messageApi.open({type: "error", content: "–ù–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"});
        return false;
      }
    }

    if (Number(birthday!.slice(0, 4)) > 2019) {
      messageApi.open({type: "error", content: "–¢—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞"});
      return false;
    }
    if (email!.length < 5 || email!.indexOf("@") === -1) {
      messageApi.open({type: "error", content: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞"});
      return false;
    }
    if (password!.length < 9) {
      messageApi.open({type: "error", content: "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å"});
      return false;
    }
    if (password !== confirmPassword) {
      messageApi.open({type: "error", content: "–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"});
      return false;
    }

    props.onStartTest({
      name: name!,
      sureName: sureName!,
      gender: gender!,
      birthday: birthday!,
      email: email!,
      password: password!,
    });
    return true;
  }

  return (
    <div className={"p-3 d-flex flex-column"}>
      {contextHolder}

      <h1 className={"text-center mb-3"}>–ö–æ—Ç–æ—Ç–µ—Å—Ç!</h1>
      <Row gutter={[5, 7]}>
        <Col span={12}><Input placeholder="–ò–º—è"
                              onChange={({target: {value}}) => setName(value)}/></Col>
        <Col span={12}><Input placeholder="–§–∞–º–∏–ª–∏—è"
                              onChange={({target: {value}}) => setSureName(value)}/></Col>
        <Col span={12}>
          <Select
            className={"w-100"}
            placeholder={"–ü–æ–ª"}
            onChange={value => setGender(value)}
            allowClear>

            <Select.Option value="male">üöπ –º—É–∂</Select.Option>
            <Select.Option value="female">üö∫ –∂–µ–Ω</Select.Option>
            <Select.Option value="other">üè≥Ô∏è‚Äçüåà –±–∏</Select.Option>
          </Select>
        </Col>
        <Col span={12}>
          <DatePicker
            className={"w-100"}
            onChange={e => setBirthday(e ? dayjs(e).format("YYYY-MM-DD") : "")}
            /*defaultValue={dayjs("2000-01-01", "YYYY-MM-DD")}*/
            placeholder={"–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"}
          />
        </Col>
        <Col span={24}><Input
          placeholder="–ü–æ—á—Ç–∞" onChange={({target: {value}}) => setEmail(value)}/></Col>
        <Col span={12}><Input.Password
          placeholder="–ü–∞—Ä–æ–ª—å" onChange={({target: {value}}) => setPassword(value)}/></Col>
        <Col span={12}>
          <Input.Password
            placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å"
            onChange={({target: {value}}) => setConfirmPassword(value)}
          />
        </Col>
      </Row>
      <Divider plain orientation={"left"}>–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</Divider>
      <p className={"mb-0"}>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista
        probare, quae sunt a te dicta? Refert tamen, quo modo.
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque, sequi?
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda dolorem explicabo nobis nostrum odio quia, ut vel veniam! A consectetur debitis iure nihil nostrum obcaecati quam quis recusandae repellendus sequi?
        {birthday}
      </p>
      <Checkbox
        className={"align-self-end"}
        onChange={e => setAllowProvisionPersonalData(e.target.checked)}>

        –°–æ–≥–ª–∞—Å–µ–Ω
      </Checkbox>
      <Divider/>
      <Button
        className={"align-self-stretch"}
        onClick={tryStartTest}
        type={"primary"}
        disabled={!allowProvisionPersonalData}>

        –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
      </Button>
    </div>
  );
}

type Answer = number | string | null;
function Test(props: {
  user: User,
  /*questions: {name: string, description: string, questions: React.ReactNode[]}[],*/
  /*answers: {moduleIndex: number, text: string}[],*/
  onComplete: () => void,
}) {
  const oftenMarks = ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–í—Å–µ–≥–¥–∞"];
  const modules: {name: string, description: string, questions: React.ReactNode[]}[] = [
    {name: "–û–±—â–µ–µ", description: "", questions: [
        <Question
          text={"–ö–∞–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?"}
          answers={[
            "–õ—é–±–ª—é –ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É",
            "–°–º–æ—Ç—Ä—é —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª",
            "–°–ª—É—à–∞—é –º—É–∑—ã–∫—É –∏–ª–∏ –ø–æ–¥–∫–∞—Å—Ç",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ—ë —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?"}
          answers={[
            "–ê–∫—Ç–∏–≤–Ω–æ, –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é",
            "–°–º–æ—Ç—Ä—é —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –∏–ª–∏ –∏–≥—Ä–∞—é –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã",
            "–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏, —Å–ª—É—à–∞—é –º—É–∑—ã–∫—É –∏–ª–∏ –∑–∞–Ω–∏–º–∞—é—Å—å —Ä—É–∫–æ–¥–µ–ª–∏–µ–º",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º?"}
          answers={[
            "–û—á–µ–Ω—å –ª—é–±–ª—é –∏ –∑–∞–±–æ—Ç–ª—é—Å—å –æ –Ω–∏—Ö",
            "–ù–µ –ø—Ä–æ—Ç–∏–≤, –Ω–æ –Ω–µ –æ—Å–æ–±–æ —É–≤–ª–µ—á–µ–Ω",
            "–ù–µ –ª—é–±–ª—é, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –±–µ–∑–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º?"}
          answers={[
            "–õ—é–±–ª—é —Ç–µ–ø–ª–æ –∏ —Å–æ–ª–Ω—Ü–µ",
            "–ù—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–≥–æ–¥—ã, –∫–∞–∂–¥–∞—è –∏–º–µ–µ—Ç —Å–≤–æ–π —à–∞—Ä–º",
            "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø—Ä–æ—Ö–ª–∞–¥—É –∏ –æ—Å–µ–Ω–Ω—é—é –ø–æ–≥–æ–¥—É",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø–∏—Ç–∞—Ç—å—Å—è?"}
          answers={[
            "–õ—é–±–ª—é –º—è—Å–æ –∏ –∂–∏—Ä–Ω—É—é –ø–∏—â—É",
            "–ü–∏—Ç–∞—é—Å—å –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–µ–π, —É–ø–æ—Ç—Ä–µ–±–ª—è—é –º–Ω–æ–≥–æ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤",
            "–õ—é–±–ª—é —Å–ª–∞–¥–∫–æ–µ –∏ —É–≥–ª–µ–≤–æ–¥—ã",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?"}
          answers={[
            "–ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
            "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–∏–∫–∞",
            "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—Ä–∞—Å–æ—Ç–∞",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞?"}
          answers={[
            "–õ—é–±–ª—é –∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º, –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
            "–ù–µ –æ—Å–æ–±–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å, –Ω–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤",
            "–°–ø–æ—Ä—Ç - —ç—Ç–æ –Ω–µ –¥–ª—è –º–µ–Ω—è",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –≤—ã—Ä–∞–∂–∞–µ—Ç–µ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏?"}
          answers={[
            "–û—Ç–∫—Ä—ã—Ç–æ –∏ —ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω–æ",
            "–°–¥–µ—Ä–∂–∞–Ω–Ω–æ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ",
            "–°–∫–ª–æ–Ω–µ–Ω –∫ —á–∞—Å—Ç—ã–º –ø–µ—Ä–µ–ø–∞–¥–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ø–æ—Ä—è–¥–∫—É –∏ —á–∏—Å—Ç–æ—Ç–µ?"}
          answers={[
            "–û—á–µ–Ω—å –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—à—É—Å—å –∫ —Å–≤–æ–∏–º –≤–µ—â–∞–º –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—é",
            "–°—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–æ –Ω–µ –æ—Å–æ–±–æ —Å—Ç—Ä–æ–≥",
            "–ù–µ –æ–±—Ä–∞—â–∞—é –Ω–∞ —ç—Ç–æ –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–ø—É—Å–∫?"}
          answers={[
            "–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞",
            "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ—Ç–¥—ã—Ö–∞—Ç—å –¥–æ–º–∞, —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã",
            "–û—Ç–¥—ã—Ö–∞—é –∞–∫—Ç–∏–≤–Ω–æ, –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —É—á—É—Å—å –Ω–æ–≤–æ–º—É",
          ]}
          other
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –∂–∏–∑–Ω–∏?"}
          answers={[
            "–õ—é–±–ª—é –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –Ω–µ –±–æ—é—Å—å –ø–µ—Ä–µ–º–µ–Ω",
            "–ù–µ–º–Ω–æ–≥–æ –±–µ—Å–ø–æ–∫–æ—é—Å—å, –Ω–æ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã",
            "–û—á–µ–Ω—å –Ω–µ –ª—é–±–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ä–∞—é—Å—å –∏—Ö –∏–∑–±–µ–≥–∞—Ç—å",
          ]}
          other
        />,
      ]},
    {name: "–°–Ω—ã", description: "", questions: [
        <QuestionSlider
          text={"–ë—ã–≤–∞–µ—Ç –ª–∏ —É –≤–∞—Å —á—É–≤—Å—Ç–≤–æ –ø–æ–ª—ë—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞?"}
          marks={oftenMarks}
        />,
        <QuestionSlider
          text={"–ß–∞—Å—Ç–æ –ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –≤–æ —Å–Ω–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?"}
          marks={oftenMarks}
        />,
        <QuestionSlider
          text={"–£ –≤–∞—Å –±—ã–≤–∞—é—Ç –∫–æ—à–º–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Å—Ç—Ä–∞—Ö –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥—É?"}
          marks={oftenMarks}
        />,
        <QuestionSlider
          text={"–ë—ã–≤–∞–µ—Ç –ª–∏ —É –≤–∞—Å –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Å–µ–π—á–∞—Å —Å–ø–∏—Ç–µ –∏ –≤–∏–¥–∏—Ç–µ —Å–æ–Ω?"}
          marks={oftenMarks}
        />,
        <QuestionSlider
          text={"–í—ã –≤–∏–¥–∏—Ç–µ —Å–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º —Å–±—ã–≤–∞—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏?"}
          marks={oftenMarks}
        />,
      ]},
    {name: "–í–∏–¥–µ–Ω–∏—è", description: "", questions: [
        <Question
          text={"–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?"}
          answers={["__ 0 __", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã —Å–∫—É—á–∞–µ—Ç–µ?"}
          answers={["|__ 0 __|", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Å–ø–∏—Ç–µ?"}
          answers={["__ 0 __", "kek))", "__ 2 __"]}
        />,
      ]},
    {name: "IQ", description: "", questions: [
        <Question
          text={"–ö–∞–∫ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏?"}
          answers={["__ 0 __", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?"}
          answers={["|__ 0 __|", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"–í—ã –ª—é–±–∏—Ç–µ –º–æ–ª–æ–∫–æ?"}
          answers={["__ 0 __", "kek))", "__ 2 __"]}
        />,
      ]},
    {name: "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", description: "", questions: [
        <Question
          text={"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eos, molestias?"}
          answers={["__ 0 __", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eos, molestias (1)?"}
          answers={["|__ 0 __|", "__ 1 __", "__ 2 __"]}
        />,
        <Question
          text={"Lorem ip sit ampisicing elit. Eos, molestias (2)?"}
          answers={["__ 0 __", "kek))", "__ 2 __"]}
        />,
      ]},
  ];

  const [currentModuleIndex, setCurrentModuleIndex] = useState(1);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  /*const [currentAnswer, setCurrentAnswer] = useState<Answer>(null);*/

  const [questionsCount, setQuestionsCount] = useState(0);
  const [completedQuestionsCount, setCompletedQuestionsCount] = useState(0);

  const [answers, setAnswers] = useState<{moduleIndex: number, value: Answer}[]>([]);

  const [openInfo, setOpenInfo] = useState(false);

  useEffect(() => {
    modules.forEach(module => setQuestionsCount(prev => prev + module.questions.length));
  }, []);

  useEffect(() => {
    setCurrentQuestionIndex(0);
  }, [currentModuleIndex]);

  function completeQuestion(answer: Answer) {
    setAnswers([...answers, {moduleIndex: currentModuleIndex, value: answer}]);
    setCompletedQuestionsCount(completedQuestionsCount + 1);

    if (modules[currentModuleIndex].questions.length > currentQuestionIndex + 1)
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    else if (modules.length > currentModuleIndex + 1)
      setCurrentModuleIndex(currentModuleIndex + 1);
    else
      alert("Complete!!!");
  }

  function Question(props: {
    text: string,
    answers: string[],
    other?: boolean,
  }) {
    const [selectedAnswerIndex, setSelectedAnswerIndex] = useState<number | null>(null);

    return (
      <Space direction={"vertical"} size={15}>
        <h3>{props.text}</h3>
        <Radio.Group
          onChange={({target: {value}}) => setSelectedAnswerIndex(value)}
          value={selectedAnswerIndex}>

          <Space direction="vertical">
            {(props.other ? [...props.answers, "–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"] : props.answers)
              .map((answer, i) => <Radio key={answer} value={i}>{answer}</Radio>)}
          </Space>
        </Radio.Group>
        <Button
          onClick={() => completeQuestion(props.answers[selectedAnswerIndex!])}
          disabled={selectedAnswerIndex === null}>

          –î–∞–ª–µ–µ
        </Button>
      </Space>
    );
  }

  function QuestionSlider(props: {text: string, marks: string[]}) {
    const [answer, setAnswer] = useState<number>(50);

    return (
      <Space direction={"vertical"} size={15}>
        <h3>{props.text}</h3>
        <Slider
          className={"mx-4"}
          value={answer}
          onChange={setAnswer}
          marks={/*{0: "lol", 100: "kek"}*/Object.fromEntries(
            props.marks.map((mark, i) => [i / (props.marks.length - 1) * 100, mark])
          )}
          included={false}
          /*defaultValue={50}*/
          tooltip={{formatter: null}}
        />
        <Button
          onClick={() => completeQuestion(answer)}>

          –î–∞–ª–µ–µ
        </Button>
      </Space>
    );
  }

  return (
    <Space className={"w-100 p-3"} direction={"vertical"}>
      <Progress percent={completedQuestionsCount / questionsCount * 100} showInfo={false}/>

      {modules[currentModuleIndex].questions[currentQuestionIndex]}

      <FloatButton onClick={() => setOpenInfo(true)} type="default"
                   shape="circle" icon={<InfoCircleOutlined/>}/>
      <Drawer
        className={""}
        title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        /*placement={"right"}*/
        closable={false}
        onClose={() => setOpenInfo(false)}
        open={openInfo}
      >
        <Steps
          direction="vertical"
          size={"small"}
          current={currentModuleIndex}
          percent={currentQuestionIndex / modules[currentModuleIndex].questions.length * 100}
          items={modules.map(module => ({
            title: module.name, description: module.description
          }))}
        />


        {/*<Button shape="circle" icon={<GithubOutlined style={{fontSize: 20}}/>}/>*/}
        <GithubOutlined style={{fontSize: 20}}/>
      </Drawer>
    </Space>
  );
}